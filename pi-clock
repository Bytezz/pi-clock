#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
from datetime import datetime
from playsound import playsound
from getkey import getkey, keys

location = os.path.dirname(os.path.realpath(__file__))
sound_dir = location+'/sounds'

class Timer:
    def __init__(self,hours,minutes,seconds,message="Complete!"):
        self.hours = hours
        self.minutes = minutes
        self.seconds = seconds
        self.message=message

    def start(self):
        while self.seconds!=0 or self.minutes!=0 or self.hours!=0:
            self.show()
            time.sleep(1)
            if self.seconds==0:
                if self.minutes==0:
                    self.hours-=1
                    self.minutes=59
                    self.seconds=60
                else:
                    self.minutes-=1
                    self.seconds=60
            self.seconds -=1
            if self.seconds==0:
                if self.minutes>0:
                    self.seconds = 60
                    self.minutes -=1
            if self.minutes==0:
                if self.hours>0:
                    self.hours-=1
                    self.minutes=60
        # print("\u001b[38;5;200m"+self.message+"\u001b[0m",end='\r')
        print()
        self.alert()
           

    def show(self):
        end='\r'
        seconds=self.seconds
        minutes=self.minutes
        hours=self.hours
        #add 0 to single didgit numbers
        if seconds<10:
            seconds='0'+str(seconds)
        if minutes<10:
            minutes='0'+str(minutes)
        if hours<10:
            hours='0'+str(hours)
        progress = f'{hours}:{minutes}:{seconds}'        
        print("\tTimer in progress : \u001b[38;5;105m"+progress+"\u001b[0m",end=end)

    def alert(self):
        print("\t\t\u001b[38;5;148m"+self.message+'\u001b[0m')
        os.chdir(sound_dir)
        playsound("kim_possible_alert.mp3")



# timer = Timer(0,0,1)
# timer.start()

ascii='''
    ░░█▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
    ██▀▀▀██▀▀▀▀▀▀██▀▀▀██
    █▒▒▒▒▒█▒▀▀▀▀▒█▒▒▒▒▒█
    █▒▒▒▒▒█▒████▒█▒▒▒▒▒█
    ██▄▄▄██▄▄▄▄▄▄██▄▄▄██
'''
clear_line='\t                    '
class Alarm:
    def __init__(self,hour,minute,period,custom_message='Complete'):
        self.hour=hour
        self.minute=minute
        self.period=period
        self.custom_message=custom_message

    def start(self):
        current_time = ''
        hour = self.hour
        minute = self.minute
        if self.period=='pm':
            hour = 12 + hour
        #add 0 to single didgit numbers
        if hour<10:
            hour = '0'+str(hour)
        if minute<10:
            minute = '0'+str(minute)

        alarm_time = f'{hour}:{minute}:00'
        while current_time!=alarm_time:
            current_time = datetime.now().strftime("%H:%M:%S")
            print(f'Alarm set for \u001b[38;5;200m{alarm_time}\u001b[0m, current time: \u001b[38;5;208m{current_time}\u001b[0m',end='\r')
            time.sleep(1)
        print()
        print("\u001b[38;5;118m"+self.custom_message+'\u001b[0m')
        self.alert()
        
    def alert(self):
        os.chdir(sound_dir)
        playsound("Huawei - Sakura Drop.mp3")

def getunitvalue(unit):
    #returns a number ranging from 0 to 59 for units second and minute, controlleed by arrow keys
    value = 0
    key=''
    while key!=keys.ENTER:
        if value<10:
            value_str='0'+str(value)
        else:
            value_str=str(value)
        print(f'\t{unit} : {value_str}',end='\r')
        key = getkey()
        if key==keys.UP:
            if value==59:
                value=0
            else:
                value+=1
        elif key==keys.DOWN:
            if value==0:
                value=59
            else:
                value-=1
    return value

def getperiod():
    #returns am or pm
    period = 'am'
    key = ''
    while key!=keys.ENTER:
        print(f'\tPeriod : {period}',end='\r')
        key = getkey()
        if key==keys.UP or key==keys.DOWN:
            if period=='am':
                period='pm'
            else:
                period='am'
    return period

def gethour():
    #returns number ranging from 1 to 12
    value=1
    key=''
    while key!=keys.ENTER:
        if value<10:
            value_str='0'+str(value)
        else:
            value_str=str(value)
        print(f'\tHour : {value_str}',end='\r')
        key=getkey()
        if key==keys.UP:
            if value==12:
                value=1
            else:
                value+=1
        elif key==keys.DOWN:
            if value==1:
                value=12
            else:
                value-=1
    return value

def interactive():
    while True:
        os.system("clear")
        print(ascii)
        print("\t'A' to set new alarm,\n\t'T' to create new timer,\n\t'S' to start new stopwatch, \n\t'Q' or 'E' to exit: ",end='')
        while True:
            opt = input().lower()
            if opt=='a' or opt=='t' or opt=='s' or opt=='q' or opt=='e':
                break
            print("\t'A' to set new alarm,\n\t'T' to create new timer,\n\t'S' to start new stopwatch, \n\t'Q' or 'E' to exit: ",end='')
        if opt=='q' or opt=='e':
            break
        if opt=='a':
            hour = gethour()
            minute = getunitvalue('Minute')
            period = getperiod()
            alarm = Alarm(hour,minute,period)
        elif opt=='t':
            pass
        elif opt=='s':
            pass
            

def main():
    hours = getunitvalue('Hour')
    minutes = getunitvalue('Minute')
    seconds = getunitvalue('Second')
    timer = Timer(hours,minutes,seconds)
    timer.start()

if __name__ == '__main__':
    main()